<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MPA" Id="{3965ca68-046c-4858-93f1-aaf5b6059f9e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MPA
VAR_INPUT
    (*EPS Interlock Bits*)
    ibInsertOK: BOOL;
    ibRetractOK: BOOL;
    ibPMPS_OK:BOOL;
    ibOverrideInterlock:BOOL; (*if true interlocks are ignored*)
    // Reset fault
    {attribute 'pytmc' := '
    pv: FF_Reset
    '}
    i_xReset: BOOL;
    sName: STRING;
    bEnableFF: BOOL := TRUE;
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
    pv:
    '}
    q_stAct     :    ST_MPA;
    {attribute 'pytmc' := '
    pv: MPS_FAULT
    '}
    xMPS_OK:BOOL;
    {attribute 'pytmc' := '
    pv: MOT_DONE
    '}
    xDone:Bool; // Motion is Done
END_VAR
VAR_IN_OUT
    io_fbFFHWO    :    FB_HardwareFFOutput;
END_VAR
VAR
    // PMPS
    fbFF    :    FB_FastFault :=(
        i_xAutoReset := TRUE,
        i_Desc := 'Device is moving',
        i_TypeCode := 16#1010);

    (*Init*)
    xFirstPass    :    BOOL;
    fbFSInit        :    R_TRIG;

    (* Timeouts*)
    tTimeOutDuration: TIME:= T#5S;
    tInserttimeout: TON;
    tRetracttimeout:TON;

    (*IO*)
    i_xInsertedLS    AT%I*: BOOL;
    i_xRetractedLS    AT%I*: BOOL;
    q_xInsert_DO    AT%Q*: BOOL;
    q_xRetract_DO    AT%Q*: BOOL;

    (* Reset Triggers *)
    rtInsert: R_TRIG;
    rtRemove: R_TRIG;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(*Initialize*)
fbFSInit( CLK := TRUE, Q => xFirstPass);
(*IO Mapping*)
ACT_IO();

IF xFirstPass THEN
    q_stAct.eState := INVALID;
    q_stAct.bRetract_SW := FALSE;
    q_stAct.bInsert_SW := FALSE;
END_IF


(* Manage States*)
IF q_stAct.i_bInLS AND  q_stAct.i_bOutLS THEN
    q_stAct.eState:=INVALID;
ELSIF NOT q_stAct.i_bInLS AND q_stAct.i_bOutLS THEN
    q_stAct.eState:=RETRACTED;
ELSIF q_stAct.i_bInLS AND NOT q_stAct.i_bOutLS THEN
    q_stAct.eState:=INSERTED;
ELSIF NOT q_stAct.i_bInLS AND NOT q_stAct.i_bOutLS THEN
    q_stAct.eState:=MOVING;
ELSE
    q_stAct.eState:=INVALID;
END_IF

(*Set the Done signal*)
xDone := (q_stAct.bRetract_SW AND q_stAct.eState=RETRACTED) OR (q_stAct.eState=INSERTED AND q_stAct.bInsert_SW);


(*MPS FAULT*)
(**)
xMPS_OK := (q_stAct.bRetract_SW AND i_xRetractedLS) XOR (i_xInsertedLS AND q_stAct.bInsert_SW);
//xMPS_OK := i_xRetractedLS XOR i_xInsertedLS;
//xMPS_OK := (q_stAct.eState=RETRACTED) OR (q_stAct.eState=INSERTED);
//xMPS_OK := (q_stAct.eState=RETRACTED) ;

(*PMPS PERMISSION*)

(* Reset the other command bit when one goes high *)
rtInsert(CLK:=q_stAct.bInsert_SW);
IF rtInsert.Q THEN
    q_stAct.bRetract_SW := FALSE;
END_IF
rtRemove(CLK:=q_stAct.bRetract_SW);
IF rtRemove.Q THEN
    q_stAct.bInsert_SW := FALSE;
END_IF

(* Can't have bRetract_SW and  bInsert_SW both be true*)
If (q_stAct.bRetract_SW) and (q_stAct.bInsert_SW) THEN
    q_stAct.bRetract_SW := FALSE;
    q_stAct.bInsert_SW := FALSE;
END_IF

(* Make the state consistent if we can *)
IF NOT (q_stAct.bRetract_SW OR q_stAct.bInsert_SW) THEN
    IF q_stAct.eState = RETRACTED THEN
        q_stAct.bRetract_SW := TRUE;
    ELSIF q_stAct.eState = INSERTED THEN
        q_stAct.bInsert_SW := TRUE;
    END_IF
END_IF

q_stAct.bRetractOK := ibRetractOK;
q_stAct.bInsertOK := ibInsertOK;

(*Actuate the device*)
q_stAct.q_bRetract := q_stAct.bRetractOK AND q_stAct.bRetract_SW;
q_stAct.q_bInsert := q_stAct.bInsertOK AND q_stAct.bInsert_SW;

IF q_stAct.q_bInsert THEN
    q_stAct.q_bRetract := FALSE;
    q_stAct.bRetract_SW:= FALSE;
ELSIF q_stAct.q_bRetract THEN
    q_stAct.q_bInsert := FALSE;
    q_stAct.bInsert_SW:= FALSE;
END_IF;




(*Timers*)
tInserttimeout(IN:= q_stAct.q_bInsert, PT := tTimeOutDuration );
tRetracttimeout(IN:= q_stAct.q_bRetract, PT := tTimeOutDuration);

///Check moving postion timout
IF NOT q_stAct.i_bInLS AND tInserttimeout.Q THEN
    q_stAct.bErrorPresent := TRUE;
ELSIF NOT q_stAct.i_bOutLS AND tRetracttimeout.Q THEN
    q_stAct.bErrorPresent := TRUE;
END_IF

(*FAST FAULT*)
IF bEnableFF THEN
    fbFF(i_DevName := sName,
        i_xOK := xMPS_OK,
        i_xReset := i_xReset,
        io_fbFFHWO := io_fbFFHWO);
END_IF

(*Soft IO Mapping*)
ACT_IO();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{090f58e5-b160-4478-a84f-328a90ba6204}">
      <Implementation>
        <ST><![CDATA[(*Inputs*)
q_stAct.i_bInLS :=  i_xInsertedLS;
q_stAct.i_bOutLS := i_xRetractedLS;

(*outputs*)
q_xInsert_DO:=q_stAct.q_bInsert;
q_xRetract_DO:=q_stAct.q_bRetract;]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>