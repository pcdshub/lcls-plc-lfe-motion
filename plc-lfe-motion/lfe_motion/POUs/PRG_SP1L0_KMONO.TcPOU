<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_SP1L0_KMONO" Id="{cd5944f9-95f2-423d-b519-d8142c33b9f5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SP1L0_KMONO
VAR
    fbMotion1: FB_MotionStage;
    fbMotion2: FB_MotionStage;
    fbMotion3: FB_MotionStage;
    fbMotion4: FB_MotionStage;
    fbMotion5: FB_MotionStage;
    fbMotion6: FB_MotionStage;

    (*
    fbFFO2: FB_BasicMotionStageAltFFO := (sName := 'SP1L0:KMONO:MMS:02');
    fbFFO4: FB_BasicMotionStageFFO := (sName := 'SP1L0:KMONO:MMS:04');
    fbFFO6: FB_BasicMotionStageFFO := (sName := 'SP1L0:KMONO:MMS:06');
    *)
    stOkBeam: ST_BeamParams := PMPS_GVL.cstFullBeam;
    bEnergyOk: BOOL;

    fbXTALFFO: FB_FastFault;
    bXtalOut: BOOL;
    bXtalIn: BOOL;

    fbRetFFO: FB_FastFault;
    bRetOut: BOOL;

    fbDiodeFFOAtPos: FB_FastFault;
    fbDiodeFFOEnergy: FB_FastFault;
    bDiodeOut: BOOL;
    bDiodeIn: BOOL;

    bInit: BOOL := TRUE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bInit THEN
    // Only allow 7.7-8.9 keV
    stOkBeam.neVRange := F_eVIncludeRange(7700, 8900);
    bInit := FALSE;
END_IF
bEnergyOK := F_SafeBPCompare(PMPS_GVL.stCurrentBeamParameters, stOkBeam);

// Motor 1 XTAL ANGLE X (SP1L0-KMONO-MMS-01)
Main.M49.bLimitForwardEnable  := TRUE;    //TRUE
Main.M49.bLimitBackwardEnable := TRUE;    //TRUE
Main.M49.nEnableMode          := Enum_StageEnableMode.ALWAYS;
Main.M49.bHardwareEnable      := TRUE;
Main.M49.bPowerSelf           := TRUE;
fbMotion1(stMotionStage:=Main.M49);

// Motor 2 XTAL VERT Y (SP1L0-KMONO-MMS-02)
//Main.M50.bLimitForwardEnable  := bM2CCWLimit;    //(+Y)
//Main.M50.bLimitBackwardEnable := bM2CWLimit;    //(-Y)
Main.M50.nEnableMode          := Enum_StageEnableMode.ALWAYS;
Main.M50.bHardwareEnable      := TRUE;
Main.M50.bPowerSelf           := TRUE;
fbMotion2(stMotionStage:=Main.M50);
//fbFFO2(stMotionStage := Main.M50,
//       fbFFHWO := GVL.fbFastFaultOutput1,
//       bFFOk := Main.M50.stAxisStatus.fActPosition < 0.1);
// Andy says trip if IN and not between 7.7 and 8.9 keV
// Andy says reset if IN and between 7.7 and 8.9 keV OR at OUT
// IN is >50, out is at 0 (+-2)
bXtalOut := Main.M50.stAxisStatus.fActPosition < 2;
bXtalIn := Main.M50.stAxisStatus.fActPosition > 50;

fbXTALFFO(
    i_xOK := bEnergyOk OR NOT bXtalIn,
    i_xReset := bXtalOut OR (bXtalIn AND bEnergyOk),
    i_xAutoReset := TRUE,
    i_DevName := Main.M50.sName,
    i_Desc := 'Unsafe eV Range: needs 7.7-8.9keV',
    io_fbFFHWO := GVL.fbFastFaultOutput1);

// Motor 3 RETICLE HORIZ X (SP1L0-KMONO-MMS-03)
//Main.M51.bLimitForwardEnable  := bM3CCWLimit;    //(+X)
//Main.M51.bLimitBackwardEnable := bM3CWLimit;    //(-X)
Main.M51.nEnableMode          := Enum_StageEnableMode.DURING_MOTION;
Main.M51.bHardwareEnable      := TRUE;
Main.M51.bPowerSelf           := TRUE;
fbMotion3(stMotionStage:=Main.M51);

// Motor 4 RETICLE VERT Y (SP1L0-KMONO-MMS-04)
//Main.M52.bLimitForwardEnable  := bM4CWLimit;    //(+Y)
//Main.M52.bLimitBackwardEnable := bM4CCWLimit;    //(-Y)
Main.M52.nEnableMode          := Enum_StageEnableMode.ALWAYS;
Main.M52.bHardwareEnable      := TRUE;
Main.M52.bPowerSelf           := TRUE;
fbMotion4(stMotionStage:=Main.M52);
//fbFFO4(stMotionStage := Main.M52,
//       fbFFHWO := GVL.fbFastFaultOutput1);
// Andy says: trip reticle if not OUT
// OUT is 1.55843, in is high limit switch
// NOTE: we don't have an encoder or an LVDT on this axis! We will use the out switch
bRetOut := NOT Main.M52.bLimitForwardEnable;
fbRetFFO(
    i_xOk := bRetOut,
    i_xAutoReset := TRUE,
    i_DevName := Main.M52.sName,
    i_Desc := 'Reticle not OUT (y>0)',
    io_fbFFHWO := GVL.fbFastFaultOutput1);

// Motor 5 DIODE HORIZ X (SP1L0-KMONO-MMS-05)
//Main.M53.bLimitForwardEnable  := bM5CCWLimit;    //(+X)
//Main.M53.bLimitBackwardEnable := bM5CWLimit;    //(-X)
Main.M53.nEnableMode          := Enum_StageEnableMode.DURING_MOTION;
Main.M53.bHardwareEnable      := TRUE;
Main.M53.bPowerSelf           := TRUE;
fbMotion5(stMotionStage:=Main.M53);

// Motor 6 DIODE VERT Y (SP1L0-KMONO-MMS-06)
//Main.M54.bLimitForwardEnable  := bM6CWLimit;    //(+Y)
//Main.M54.bLimitBackwardEnable := bM6CCWLimit;    //(-Y)
Main.M54.nEnableMode          := Enum_StageEnableMode.ALWAYS;
Main.M54.bHardwareEnable      := TRUE;
Main.M54.bPowerSelf           := TRUE;
fbMotion6(stMotionStage:=Main.M54);
//fbFFO6(stMotionStage := Main.M54,
//       fbFFHWO := GVL.fbFastFaultOutput1);
// Andy says trip if NOT IN or NOT OUT
// Andy says trip if IN AND NOT (7.7 to 8.9 keV)
// IN is 0, OUT is 98.5
bDiodeOut := Main.M54.stAxisStatus.fActPosition > 96.5;
bDiodeIn := Main.M54.stAxisStatus.fActPosition < 2;
fbDiodeFFOAtPos(
    i_xOk := bDiodeOut XOR bDiodeIn,
    i_xAutoReset := TRUE,
    i_DevName := Main.M54.sName,
    i_Desc := 'Diode between states.',
    io_fbFFHWO := GVL.fbFastFaultOutput1);
fbDiodeFFOEnergy(
    i_xOk := bEnergyOk OR NOT bDiodeIn,
    i_xReset := bDiodeOut OR (bDiodeIn AND bEnergyOk),
    i_xAutoReset := TRUE,
    i_DevName := Main.M54.sName,
    //i_Desc := 'Unsafe eV Range',
    i_Desc := 'Override if 7.7-8.9keV',
    io_fbFFHWO := GVL.fbFastFaultOutput1);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>