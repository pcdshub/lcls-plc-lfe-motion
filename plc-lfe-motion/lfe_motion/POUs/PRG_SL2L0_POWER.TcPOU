<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_SL2L0_POWER" Id="{b81ede99-2259-4f9f-b687-2b775d0f5c19}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SL2L0_POWER
VAR // linking to rtd in the following order Bottom - South - TOP - NORTH
    {attribute 'pytmc' := '
        pv: SL2L0:POWER
        io: io
    '}
    {attribute 'TcLinkTo' := '.RTD_Bottom_1.iRaw := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 1^Value;
                              .RTD_Bottom_1.bError := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 1^Status^Error;
                              .RTD_Bottom_1.bUnderrange := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_Bottom_1.bOverrange := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_Bottom_2.iRaw := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 2^Value;
                              .RTD_Bottom_2.bError := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 2^Status^Error;
                              .RTD_Bottom_2.bUnderrange := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_Bottom_2.bOverrange := TIIB[SL2L0-EL3202-E8]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_South_1.iRaw := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 1^Value;
                              .RTD_South_1.bError := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 1^Status^Error;
                              .RTD_South_1.bUnderrange := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_South_1.bOverrange := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_South_2.iRaw := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 2^Value;
                              .RTD_South_2.bError := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 2^Status^Error;
                              .RTD_South_2.bUnderrange := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_South_2.bOverrange := TIIB[SL2L0-EL3202-E9]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_TOP_1.iRaw := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Value;
                              .RTD_TOP_1.bError := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Status^Error;
                              .RTD_TOP_1.bUnderrange := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_TOP_1.bOverrange := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_TOP_2.iRaw := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 2^Value;
                              .RTD_TOP_2.bError := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 2^Status^Error;
                              .RTD_TOP_2.bUnderrange := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_TOP_2.bOverrange := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 2^Status^Overrange;
                              .RTD_North_1.iRaw := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Value;
                              .RTD_North_1.bError := TIIB[SL2L0-EL3202-E10]^RTD Inputs Channel 1^Status^Error;
                              .RTD_North_1.bUnderrange := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 1^Status^Underrange;
                              .RTD_North_1.bOverrange := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 1^Status^Overrange;
                              .RTD_North_2.iRaw := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 2^Value;
                              .RTD_North_2.bError := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 2^Status^Error;
                              .RTD_North_2.bUnderrange := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 2^Status^Underrange;
                              .RTD_North_2.bOverrange := TIIB[SL2L0-EL3202-E11]^RTD Inputs Channel 2^Status^Overrange'}
    fbSL2L0: FB_SLITS_POWER;

    {attribute 'pytmc' := '
    pv: SL2L0:POWER:GO;
    io: io;
    field: ZNAM False;
    field: ONAM True;
    '}
    bExecuteMotion:BOOL ;


    (*fbMotion1: FB_SimMotor;
    fbMotion2: FB_SimMotor;
    fbMotion3: FB_SimMotor;
    fbMotion4: FB_SimMotor;*)
    bMoveOk:BOOL :=TRUE;

     (*Offsets*)
    (* Absolute encoder value at the HLS + Absolute encoder value at the centered beam *)
    rEncoderOffsetTop: REAL := 0;
    rEncoderOffsetBottom: REAL := 0;
    rEncoderOffsetNorth: REAL := 0;
    rEncoderOffsetSouth: REAL := 0;

    fbSL1L0: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(*
--MAPPING TO PHYSICAL TERMINAL--
Main.M45 -> M1    (Bottom)
Main.M46 -> M2    (South)
Main.M47 -> M3    (Top)
Main.M48 -> M4    (North)
*)

fbSL2L0.rEncoderOffsetTop := rEncoderOffsetTop;
fbSL2L0.rEncoderOffsetBottom := rEncoderOffsetBottom;
fbSL2L0.rEncoderOffsetNorth := rEncoderOffsetNorth;
fbSL2L0.rEncoderOffsetSouth := rEncoderOffsetSouth;

fbSL2L0.bMoveOk := bMoveOk;
fbSL2L0(stTopBlade:=  Main.M47,
        stBottomBlade:= Main.M45,
        stNorthBlade:=  Main.M48,
        stSouthBlade:=  Main.M46,
        bExecuteMotion:=bExecuteMotion);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>